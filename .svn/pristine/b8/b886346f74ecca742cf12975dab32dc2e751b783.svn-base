using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Collections.ObjectModel;
using LifeTester.Model;
using System.Windows;
using System.Windows.Input;
using LifeTester.Commands;
using System.Windows.Controls;
using LifeTester.Util;
using WMPLib;
using System.Runtime.InteropServices;//用来引入dll 文件！
using System.Diagnostics;// 用来引入process类
using System.Windows.Forms;
using System.IO;


namespace LifeTester.ViewModel
{

   
    /// <summary>
    /// 提供测试控制页面的处理逻辑
    /// </summary>
    public class ControlPageVM : BaseVM
    {
       

        //public System.Media.SoundPlayer myMedia1 = new System.Media.SoundPlayer();

        MediaPlayer myMedia = new MediaPlayer();

        private string signalName;
        private string signalName2;
        private string signalNameAll;
        private int volume1;
        private int volume2;
        private double voltume1Temp;
        private double voltume2Temp;
        private int TestMin;
        /// <summary>
        /// 获取或设置信号名称
        /// </summary>
        public string SignalName//状态栏显示
        {
            get
            {
                return signalName;
            }
            set
            {
                if (signalName != value)
                {
                    signalName = value;
                    this.OnPropertyChanged(p => p.SignalName);//更新状态栏显示信息
                }
            }
        }



        public string SignalName2
        {
            get
            {
                return signalName2;
            }
            set
            {
                if (signalName2 != value)
                {
                    signalName2 = value;
                    this.OnPropertyChanged(p => p.SignalName2);
                }
            }
        }

        public string SignalNameAll//状态栏显示
        {
            get
            {
                return signalNameAll = signalName + signalName2;
            }
            set
            {
                if (signalNameAll != value)
                {
                    signalNameAll = value;
                    this.OnPropertyChanged(p => p.SignalNameAll);//更新状态栏显示信息
                }
            }
        }

        private ObservableCollection<Card> cards;
        /// <summary>
        /// 获取或设置板卡集合
        /// </summary>
        public ObservableCollection<Card> Cards
        {
            get
            {
                return cards;
            }
            set
            {
                if (cards != value)
                {
                    cards = value;
                    this.OnPropertyChanged(p => p.Cards);
                }
            }
        }

        /// <summary>
        /// 添加命令绑定
        /// </summary>
        /// <param name="ele">测试控制窗口对象</param>
        public override void AddCommands(UIElement ele)
        {
            ele.CommandBindings.Add(new CommandBinding(ControlPageCommands.CardStartStopCommand, OnCardStartStop));
            ele.CommandBindings.Add(new CommandBinding(ControlPageCommands.ChannelPausePlayCommand, OnChannelPausePlay));
            ele.CommandBindings.Add(new CommandBinding(ControlPageCommands.SelectionChangedCommand, OnSelectionChanged));
            ele.CommandBindings.Add(new CommandBinding(ControlPageCommands.SelectionTDChangedCommand, OnSelectionTDChanged));
        }

        /// <summary>
        /// 当前板卡发生变化时触发事件
        /// </summary>
        /// <param name="sender">命令绑定的对象</param>
        /// <param name="e">命令相关参数</param>
        public void OnSelectionChanged(object sender, ExecutedRoutedEventArgs e)
        {
            Channelss.Clear();
            var card = e.Parameter as Card;
            System.Diagnostics.Debug.Assert(card != null);
            Cache.Instance.SetCurrent(card.Number);
        }
        List<Channel> Channelss = new List<Channel>();
        /// <summary>
        /// 当前板卡发生变化时触发事件
        /// </summary>
        /// <param name="sender">命令绑定的对象</param>
        /// <param name="e">命令相关参数</param>
        public void OnSelectionTDChanged(object sender, ExecutedRoutedEventArgs e)
        {
           
            var card = e.Parameter as Channel;
            if (card == null) return;
            if (card.State == States.CHECK) {
                card.PausePlayImageSource = ImageUri.PAUSE_IMAGE_SOURCE;
                Channelss.Remove(card);
            }
            else { 
            card.PausePlayImageSource = ImageUri.Cheak_IMAGE_SOURCE;
                Channelss.Add(card);
            }
            if (card.State == States.CHECK) {
                card.State = States.NOTCHECK;
            }
            else { 
            card.State = States.CHECK;
            }
            //System.Diagnostics.Debug.Assert(card != null);
            //Cache.Instance.SetCurrent(card.Number);
        }



        [DllImport("winmm.dll", EntryPoint = "waveOutSetVolume", CharSet = CharSet.Auto)]
        public static extern int waveOutSetVolume(uint deviceID, uint Volume);

        /// <summary>
        /// 板卡启动/停止点击触发的事件
        /// </summary>
        /// <param name="sender">命令绑定的对象</param>
        /// <param name="e">命令相关参数</param>
        public void OnCardStartStop(object sender, ExecutedRoutedEventArgs e)
        {
            var card = e.Parameter as Card;
            Cache.Instance.SetCurrent(card.Number);
            if (Channelss.Count == 0) {
                foreach (Channel item in card.Channels)
                {
                    item.State = States.CHECK;
                    item.PausePlayImageSource = ImageUri.Cheak_IMAGE_SOURCE;
                }
                Channelss.AddRange(card.Channels);
            }
            if (card.StartStopImageSource == ImageUri.START_IMAGE_SOURCE)
            {
                if (Cache.Instance.CurrentContext.Start())//启动所有通道的指令入口，如何成功则启动{}，否则“操作失败”
                {

                    
                   if(Cache.Instance.CurrentContext.CurrentCard.Number == "1")
                    {
                        volume1 = (int)(voltume1Temp * 10);
                        if (volume1 == 0)
                        {
                            MessageBoxWindow.ShowDialog("请设置测试电压值");
                        }
                        else if (TestMin == 0)
                        {
                            MessageBoxWindow.ShowDialog("请设置测试时间长度");
                        }
                        else
                        {
                            myMedia.myMedia1Play1(true, signalName, volume1);//启动播放器1
                            
                            //myMedia.SetVol();
                            //myMedia.waveOutSetVolume();
                            waveOutSetVolume(0,65000);
                           
                            card.StartStopImageSource = ImageUri.STOP_IMAGE_SOURCE;//更换显示的图标
                            card.ImageTooltip = "停止";
                        }
                   
                    }
                    if (Cache.Instance.CurrentContext.CurrentCard.Number == "2")
                    {
                        volume2 = (int)(voltume2Temp * 10);
                        if (volume2 == 0)
                        {
                            MessageBoxWindow.ShowDialog("请设置测试电压值");
                        }
                        else if (TestMin == 0)
                        {
                            MessageBoxWindow.ShowDialog("请设置测试时间长度");
                        }
                        else
                        {
                            myMedia.myMedia1Play2(true, signalName2, volume2);//启动播放器1.
                            card.StartStopImageSource = ImageUri.STOP_IMAGE_SOURCE;//更换显示的图标
                            card.ImageTooltip = "停止";
                        }
                    }
                    
                }
                else
                {
                    MessageBoxWindow.ShowDialog("操作失败");
                }
            }
            else
            {
                if (Cache.Instance.CurrentContext.Stop())
                {
                    card.StartStopImageSource = ImageUri.START_IMAGE_SOURCE;
                    card.ImageTooltip = "启动";
                    if (Cache.Instance.CurrentContext.CurrentCard.Number == "1")
                    {
                        myMedia.myMedia1Play1(false, signalName, 0);//关闭播放器1
                    }
                    if (Cache.Instance.CurrentContext.CurrentCard.Number == "2")
                    {
                        myMedia.myMedia1Play2(false, signalName2, 0);//关闭播放器1
                    }
                }
                else
                {
                    MessageBoxWindow.ShowDialog("操作失败");
                }
            }
        }

        /// <summary>
        /// 通道暂停/继续点击触发的事件
        /// </summary>
        /// <param name="sender">命令绑定的对象</param>
        /// <param name="e">命令相关参数</param>
        public void OnChannelPausePlay(object sender, ExecutedRoutedEventArgs e)
        {
            var channel = e.Parameter as Channel;
            if (channel.PausePlayImageSource == ImageUri.PAUSE_IMAGE_SOURCE)
            {
                if (Cache.Instance.CurrentContext.Pause(channel.Number))
                {
                    channel.PausePlayImageSource = ImageUri.PLAY_IMAGE_SOURCE;
                    channel.ImageTooltip = "继续";
                }
                else
                {
                    MessageBoxWindow.ShowDialog("操作失败");
                }
            }
            else
            {
                if (Cache.Instance.CurrentContext.Continue(channel.Number))
                {
                    channel.PausePlayImageSource = ImageUri.PAUSE_IMAGE_SOURCE;
                    channel.ImageTooltip = "暂停";
                }
                else
                {
                    MessageBoxWindow.ShowDialog("操作失败");
                }
            }
        }

        public override void Init()
        {
            if (Inited)
            {
                return;
            }
            base.Init();

            //默认设置第一个测试板卡的信号源
            SignalName = Cache.Instance.Cards[0].SignalSource;
            Cards = new ObservableCollection<Card>();

            Cache.Instance.Cards.ForEach(c => Cards.Add(c));
        }

        /// <summary>
        /// 接受到通知时的处理
        /// </summary>
        /// <param name="sender">通知者对象</param>
        /// <param name="e">通知者发送通知时的事件参数</param>
        public override void Receive(object sender, Observer.NotifyEventArgs e)
        {
            switch (e.MessageTypes)
            {
                case LifeTester.Observer.MessageTypes.UPDATE_SIGNAL_SOURCE://更新播放文件
                    SignalName = e.ParamObject.ToString();
                    break;

                case LifeTester.Observer.MessageTypes.UPDATE_SIGNAL_SOURCE2:
                    SignalName2 = e.ParamObject.ToString();
                    break;

                case LifeTester.Observer.MessageTypes.UPDATE_SYSTEM_VOLTAGE://捕获测试电压参数
                    voltume1Temp = (double)e.ParamObject;//将 object double 转化成int 
                    break;

                case LifeTester.Observer.MessageTypes.UPDATE_SYSTEM_TIME: //捕获测试时间长度参数
                    TestMin = (int)e.ParamObject;
                    break;

                case LifeTester.Observer.MessageTypes.UPDATE_SYSTEM_VOLTAGEBOARD2:
                    voltume2Temp = (double)e.ParamObject;
                    break;

                default:
                    break;
            }
        }
    }
}
