using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using LifeTester.UC;
using LifeTester.ViewModel;
using LifeTester.Model;
using NAudio.Wave;
using NAudio.Wave.SampleProviders;

namespace LifeTester.View
{
    /// <summary>
    /// 表示信号设置页面
    /// </summary>
    public partial class SignalSettingPage : BaseView
    {
        public SignalSettingPage()
        {
            InitializeComponent();
            VM = new SignalSettingPageVM();
            VM.AddCommands(this);
            this.DataContext = VM;
            cbxSweepDeviceOne.ItemsSource = DirectSoundOut.Devices;
            cbxSweepDeviceOne.DisplayMemberPath = "Description";
            cbxSweepDeviceOne.SelectedValuePath = "Guid";
            cbxSweepDeviceOne.SelectionChanged += CbxSweepDeviceOne_SelectionChanged;
            cbxSweepDeviceOne.SelectedIndex = 0;

            cbxSweepDeviceTwo.ItemsSource = DirectSoundOut.Devices;
            cbxSweepDeviceTwo.DisplayMemberPath = "Description";
            cbxSweepDeviceTwo.SelectedValuePath = "Guid";
            cbxSweepDeviceTwo.SelectionChanged += CbxSweepDeviceTwo_SelectionChanged;
            cbxSweepDeviceTwo.SelectedIndex = 0;

        }

        private void CbxSweepDeviceTwo_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Cache.DirectSoundOutDeviceTwo = (Guid)cbxSweepDeviceTwo.SelectedValue;
            LogHelper.WriteInfoLog("选择的声卡二："+ cbxSweepDeviceTwo.DisplayMemberPath.ToString());
            
        }

        private void CbxSweepDeviceOne_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Cache.DirectSoundOutDeviceOne = (Guid)cbxSweepDeviceOne.SelectedValue;
            LogHelper.WriteInfoLog("选择的声卡一：" + cbxSweepDeviceOne.DisplayMemberPath.ToString());
        }

        private void btnBrowser_Click(object sender, RoutedEventArgs e)
        {

        }

        private void btnBrowser2_Click(object sender, RoutedEventArgs e)
        {

        }

        private void btnSweepStart_Click(object sender, RoutedEventArgs e)
        {
            //WaveOutEvent woe = new WaveOutEvent();
            //woe.DeviceNumber = cbxSweepDevice.SelectedIndex;
            //Cache.driverOut = woe;
            //Cache.wg = new SignalGenerator();
            //Cache.driverOut.Init(Cache.wg);
            //Cache.wg.Type = SignalGeneratorType.Sweep;
            //Cache.wg.Frequency = Convert.ToDouble(duStartfrequency.Text);
            //Cache.wg.FrequencyEnd = Convert.ToDouble(duEndfrequency.Text);
            //Cache.wg.SweepLengthSecs = Convert.ToDouble(duSweepLength.Text);
            //Cache.driverOut.Play();
        }

        private void btnSweepEnd_Click(object sender, RoutedEventArgs e)
        {
            //if (Cache.driverOut != null)
            //{
            //    Cache.driverOut.Stop();
            //}

        }

        private void ckSweepOne_Checked(object sender, RoutedEventArgs e)
        {

            gbsweepOne.Visibility = Visibility.Visible;
            btnBrowser.IsEnabled = false;
            btnBrowser.Visibility = Visibility.Collapsed;

            if (Cache._dsOne == null)
            {
                DirectSoundOut woe = new DirectSoundOut(Cache.DirectSoundOutDeviceOne);
                Cache._dsOne = woe;
                Cache.wgOne = new SignalGenerator();
                Cache._dsOne.Init(Cache.wgOne);
                Cache.wgOne.Type = SignalGeneratorType.Sweep;
                Cache.wgOne.Frequency = Convert.ToDouble(duStartfrequencyOne.Text);
                Cache.wgOne.FrequencyEnd = Convert.ToDouble(duEndfrequencyOne.Text);
                Cache.wgOne.SweepLengthSecs = Convert.ToDouble(duSweepLengthOne.Text);
            }

        }

        private void ckSweepTwo_Checked(object sender, RoutedEventArgs e)
        {


            gbsweepTwo.Visibility = Visibility.Visible;
            btnBrowser2.IsEnabled = false;
            btnBrowser2.Visibility = Visibility.Collapsed;
            if (Cache._dsTwo == null)
            {
                DirectSoundOut woe = new DirectSoundOut(Cache.DirectSoundOutDeviceTwo);
                Cache._dsTwo = woe;
                Cache.wgTwo = new SignalGenerator();
                Cache._dsTwo.Init(Cache.wgTwo);
                Cache.wgTwo.Type = SignalGeneratorType.Sweep;
                Cache.wgTwo.Frequency = Convert.ToDouble(duStartfrequencyTwo.Text);
                Cache.wgTwo.FrequencyEnd = Convert.ToDouble(duEndfrequencyTwo.Text);
                Cache.wgTwo.SweepLengthSecs = Convert.ToDouble(duSweepLengthTwo.Text);

            }
        }

        private void ckSweepOne_Unchecked(object sender, RoutedEventArgs e)
        {
            gbsweepOne.Visibility = Visibility.Collapsed;
            btnBrowser.IsEnabled = true;
            btnBrowser.Visibility = Visibility.Visible;


            if (Cache._dsOne != null)
            {
                Cache._dsOne.Dispose();
                Cache._dsOne = null;
            }
            if (Cache.wgOne != null)
            {
                Cache.wgOne = null;
            }

        }

        private void ckSweepTwo_Unchecked(object sender, RoutedEventArgs e)
        {
            btnBrowser2.IsEnabled = true;
            btnBrowser2.Visibility = Visibility.Visible;
            gbsweepTwo.Visibility = Visibility.Collapsed;

            if (Cache._dsTwo != null)
            {
                Cache._dsTwo.Dispose();
                Cache._dsTwo = null;
            }
            if (Cache.wgTwo != null)
            {
                Cache.wgTwo = null;
            }
        }
    }
}
